// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file gameserver.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum PaySymbolType
 */
export enum PaySymbolType {
  /**
   * @generated from enum value: Normal = 0;
   */
  Normal = 0,

  /**
   * @generated from enum value: FreeSpin = 1;
   */
  FreeSpin = 1,

  /**
   * @generated from enum value: Wild = 2;
   */
  Wild = 2,

  /**
   * @generated from enum value: Bonus = 3;
   */
  Bonus = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PaySymbolType)
proto3.util.setEnumType(PaySymbolType, "PaySymbolType", [
  { no: 0, name: "Normal" },
  { no: 1, name: "FreeSpin" },
  { no: 2, name: "Wild" },
  { no: 3, name: "Bonus" },
]);

/**
 * @generated from message CreateSessionRequest
 */
export class CreateSessionRequest extends Message<CreateSessionRequest> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: int32 station_id = 2;
   */
  stationId = 0;

  constructor(data?: PartialMessage<CreateSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CreateSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "station_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionRequest {
    return new CreateSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined, b: CreateSessionRequest | PlainMessage<CreateSessionRequest> | undefined): boolean {
    return proto3.util.equals(CreateSessionRequest, a, b);
  }
}

/**
 * @generated from message CreateSessionResponse
 */
export class CreateSessionResponse extends Message<CreateSessionResponse> {
  /**
   * @generated from field: string session_key = 1;
   */
  sessionKey = "";

  constructor(data?: PartialMessage<CreateSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CreateSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSessionResponse {
    return new CreateSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined, b: CreateSessionResponse | PlainMessage<CreateSessionResponse> | undefined): boolean {
    return proto3.util.equals(CreateSessionResponse, a, b);
  }
}

/**
 * @generated from message BalanceRequest
 */
export class BalanceRequest extends Message<BalanceRequest> {
  /**
   * @generated from field: string session_key = 1;
   */
  sessionKey = "";

  constructor(data?: PartialMessage<BalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceRequest {
    return new BalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceRequest {
    return new BalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceRequest {
    return new BalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BalanceRequest | PlainMessage<BalanceRequest> | undefined, b: BalanceRequest | PlainMessage<BalanceRequest> | undefined): boolean {
    return proto3.util.equals(BalanceRequest, a, b);
  }
}

/**
 * @generated from message BalanceResponse
 */
export class BalanceResponse extends Message<BalanceResponse> {
  /**
   * @generated from field: string entry = 1;
   */
  entry = "";

  /**
   * @generated from field: string winnings = 2;
   */
  winnings = "";

  constructor(data?: PartialMessage<BalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "winnings", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceResponse {
    return new BalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceResponse {
    return new BalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceResponse {
    return new BalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BalanceResponse | PlainMessage<BalanceResponse> | undefined, b: BalanceResponse | PlainMessage<BalanceResponse> | undefined): boolean {
    return proto3.util.equals(BalanceResponse, a, b);
  }
}

/**
 * @generated from message InitRequest
 */
export class InitRequest extends Message<InitRequest> {
  /**
   * @generated from field: string game_symbol = 1;
   */
  gameSymbol = "";

  /**
   * int32 index = 2;
   * int32 counter = 3;
   *
   * @generated from field: string session_key = 2;
   */
  sessionKey = "";

  constructor(data?: PartialMessage<InitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "InitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitRequest {
    return new InitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitRequest | PlainMessage<InitRequest> | undefined, b: InitRequest | PlainMessage<InitRequest> | undefined): boolean {
    return proto3.util.equals(InitRequest, a, b);
  }
}

/**
 * @generated from message InitResponse
 */
export class InitResponse extends Message<InitResponse> {
  /**
   * @generated from field: string entry = 1;
   */
  entry = "";

  /**
   * @generated from field: string winnings = 2;
   */
  winnings = "";

  /**
   * int32 index = 2;
   * int32 reel_set_size = 3;
   *
   * @generated from field: int32 request_counter = 3;
   */
  requestCounter = 0;

  /**
   * @generated from field: repeated InitResponse.Paytable paytable = 4;
   */
  paytable: InitResponse_Paytable[] = [];

  /**
   * @generated from field: int32 lines = 5;
   */
  lines = 0;

  /**
   * @generated from field: repeated int32 reel_offset = 6;
   */
  reelOffset: number[] = [];

  /**
   * @generated from field: double total_bet_max = 7;
   */
  totalBetMax = 0;

  /**
   * @generated from field: double total_bet_min = 8;
   */
  totalBetMin = 0;

  /**
   * @generated from field: repeated string reel_set0 = 9;
   */
  reelSet0: string[] = [];

  /**
   * @generated from field: repeated string reel_set1 = 10;
   */
  reelSet1: string[] = [];

  /**
   * @generated from field: repeated string reel_set2 = 11;
   */
  reelSet2: string[] = [];

  /**
   * @generated from field: repeated string reel_set3 = 12;
   */
  reelSet3: string[] = [];

  /**
   * @generated from field: repeated string reel_set4 = 13;
   */
  reelSet4: string[] = [];

  constructor(data?: PartialMessage<InitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "InitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "winnings", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "paytable", kind: "message", T: InitResponse_Paytable, repeated: true },
    { no: 5, name: "lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "reel_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 7, name: "total_bet_max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "total_bet_min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "reel_set0", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "reel_set1", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "reel_set2", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "reel_set3", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "reel_set4", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitResponse {
    return new InitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitResponse {
    return new InitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitResponse {
    return new InitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitResponse | PlainMessage<InitResponse> | undefined, b: InitResponse | PlainMessage<InitResponse> | undefined): boolean {
    return proto3.util.equals(InitResponse, a, b);
  }
}

/**
 * @generated from message InitResponse.Paytable
 */
export class InitResponse_Paytable extends Message<InitResponse_Paytable> {
  /**
   * @generated from field: int32 symbol = 1;
   */
  symbol = 0;

  /**
   * @generated from field: repeated int32 paytable = 2;
   */
  paytable: number[] = [];

  /**
   * @generated from field: PaySymbolType type = 3;
   */
  type = PaySymbolType.Normal;

  constructor(data?: PartialMessage<InitResponse_Paytable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "InitResponse.Paytable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "symbol", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "paytable", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(PaySymbolType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitResponse_Paytable {
    return new InitResponse_Paytable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitResponse_Paytable {
    return new InitResponse_Paytable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitResponse_Paytable {
    return new InitResponse_Paytable().fromJsonString(jsonString, options);
  }

  static equals(a: InitResponse_Paytable | PlainMessage<InitResponse_Paytable> | undefined, b: InitResponse_Paytable | PlainMessage<InitResponse_Paytable> | undefined): boolean {
    return proto3.util.equals(InitResponse_Paytable, a, b);
  }
}

/**
 * @generated from message SpinRequest
 */
export class SpinRequest extends Message<SpinRequest> {
  /**
   * @generated from field: string game_symbol = 1;
   */
  gameSymbol = "";

  /**
   * @generated from field: int32 bet_amount = 2;
   */
  betAmount = 0;

  /**
   * @generated from field: int32 lines = 3;
   */
  lines = 0;

  /**
   * int32 index = 4;
   *
   * @generated from field: int32 req_counter = 4;
   */
  reqCounter = 0;

  /**
   * @generated from field: repeated int32 reel_offset = 5;
   */
  reelOffset: number[] = [];

  /**
   * @generated from field: string session_key = 6;
   */
  sessionKey = "";

  constructor(data?: PartialMessage<SpinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SpinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "bet_amount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lines", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "reel_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpinRequest {
    return new SpinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpinRequest {
    return new SpinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpinRequest {
    return new SpinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SpinRequest | PlainMessage<SpinRequest> | undefined, b: SpinRequest | PlainMessage<SpinRequest> | undefined): boolean {
    return proto3.util.equals(SpinRequest, a, b);
  }
}

/**
 * @generated from message SpinResponse
 */
export class SpinResponse extends Message<SpinResponse> {
  /**
   * @generated from field: string entry = 1;
   */
  entry = "";

  /**
   * @generated from field: repeated string reel_set = 2;
   */
  reelSet: string[] = [];

  /**
   * @generated from field: repeated SpinResponse.Win win = 3;
   */
  win: SpinResponse_Win[] = [];

  /**
   * @generated from field: repeated int32 reel_offset = 4;
   */
  reelOffset: number[] = [];

  /**
   * @generated from field: int32 req_counter = 5;
   */
  reqCounter = 0;

  /**
   * @generated from field: repeated SpinResponse.freeSpin free_spin = 6;
   */
  freeSpin: SpinResponse_freeSpin[] = [];

  /**
   * bonus games
   *
   * @generated from field: int32 bonus_game_count = 7;
   */
  bonusGameCount = 0;

  /**
   * @generated from field: string winnings = 8;
   */
  winnings = "";

  constructor(data?: PartialMessage<SpinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SpinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reel_set", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "win", kind: "message", T: SpinResponse_Win, repeated: true },
    { no: 4, name: "reel_offset", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 5, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "free_spin", kind: "message", T: SpinResponse_freeSpin, repeated: true },
    { no: 7, name: "bonus_game_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "winnings", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpinResponse {
    return new SpinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpinResponse {
    return new SpinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpinResponse {
    return new SpinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SpinResponse | PlainMessage<SpinResponse> | undefined, b: SpinResponse | PlainMessage<SpinResponse> | undefined): boolean {
    return proto3.util.equals(SpinResponse, a, b);
  }
}

/**
 * @generated from message SpinResponse.Win
 */
export class SpinResponse_Win extends Message<SpinResponse_Win> {
  /**
   * @generated from field: int32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: int32 symbol = 2;
   */
  symbol = 0;

  /**
   * @generated from field: int32 amount_win = 3;
   */
  amountWin = 0;

  /**
   * @generated from field: repeated int32 win_positions = 4;
   */
  winPositions: number[] = [];

  constructor(data?: PartialMessage<SpinResponse_Win>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SpinResponse.Win";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "symbol", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "amount_win", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "win_positions", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpinResponse_Win {
    return new SpinResponse_Win().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpinResponse_Win {
    return new SpinResponse_Win().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpinResponse_Win {
    return new SpinResponse_Win().fromJsonString(jsonString, options);
  }

  static equals(a: SpinResponse_Win | PlainMessage<SpinResponse_Win> | undefined, b: SpinResponse_Win | PlainMessage<SpinResponse_Win> | undefined): boolean {
    return proto3.util.equals(SpinResponse_Win, a, b);
  }
}

/**
 * free spins
 *
 * @generated from message SpinResponse.freeSpin
 */
export class SpinResponse_freeSpin extends Message<SpinResponse_freeSpin> {
  /**
   * @generated from field: repeated string reel_set = 2;
   */
  reelSet: string[] = [];

  /**
   * @generated from field: repeated SpinResponse.Win win = 3;
   */
  win: SpinResponse_Win[] = [];

  constructor(data?: PartialMessage<SpinResponse_freeSpin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SpinResponse.freeSpin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "reel_set", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "win", kind: "message", T: SpinResponse_Win, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpinResponse_freeSpin {
    return new SpinResponse_freeSpin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpinResponse_freeSpin {
    return new SpinResponse_freeSpin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpinResponse_freeSpin {
    return new SpinResponse_freeSpin().fromJsonString(jsonString, options);
  }

  static equals(a: SpinResponse_freeSpin | PlainMessage<SpinResponse_freeSpin> | undefined, b: SpinResponse_freeSpin | PlainMessage<SpinResponse_freeSpin> | undefined): boolean {
    return proto3.util.equals(SpinResponse_freeSpin, a, b);
  }
}

/**
 * @generated from message BonusGameRequest
 */
export class BonusGameRequest extends Message<BonusGameRequest> {
  /**
   * @generated from field: string session_key = 1;
   */
  sessionKey = "";

  /**
   * @generated from field: int32 req_counter = 2;
   */
  reqCounter = 0;

  /**
   * @generated from field: int32 selected = 3;
   */
  selected = 0;

  /**
   * @generated from field: string game_symbol = 4;
   */
  gameSymbol = "";

  constructor(data?: PartialMessage<BonusGameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BonusGameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "selected", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "game_symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BonusGameRequest {
    return new BonusGameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BonusGameRequest {
    return new BonusGameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BonusGameRequest {
    return new BonusGameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BonusGameRequest | PlainMessage<BonusGameRequest> | undefined, b: BonusGameRequest | PlainMessage<BonusGameRequest> | undefined): boolean {
    return proto3.util.equals(BonusGameRequest, a, b);
  }
}

/**
 * @generated from message BonusGameResponse
 */
export class BonusGameResponse extends Message<BonusGameResponse> {
  /**
   * @generated from field: string winnings = 1;
   */
  winnings = "";

  /**
   * @generated from field: int32 req_counter = 2;
   */
  reqCounter = 0;

  /**
   * @generated from field: int32 bonus_game_count = 3;
   */
  bonusGameCount = 0;

  constructor(data?: PartialMessage<BonusGameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BonusGameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "winnings", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "bonus_game_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BonusGameResponse {
    return new BonusGameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BonusGameResponse {
    return new BonusGameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BonusGameResponse {
    return new BonusGameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BonusGameResponse | PlainMessage<BonusGameResponse> | undefined, b: BonusGameResponse | PlainMessage<BonusGameResponse> | undefined): boolean {
    return proto3.util.equals(BonusGameResponse, a, b);
  }
}

/**
 * @generated from message EndSessionRequest
 */
export class EndSessionRequest extends Message<EndSessionRequest> {
  /**
   * @generated from field: string session_key = 1;
   */
  sessionKey = "";

  /**
   * @generated from field: int32 req_counter = 2;
   */
  reqCounter = 0;

  /**
   * @generated from field: int32 win_percent = 3;
   */
  winPercent = 0;

  /**
   * @generated from field: int32 total_winnings_cashout = 4;
   */
  totalWinningsCashout = 0;

  constructor(data?: PartialMessage<EndSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "EndSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "win_percent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "total_winnings_cashout", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndSessionRequest {
    return new EndSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndSessionRequest {
    return new EndSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndSessionRequest {
    return new EndSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EndSessionRequest | PlainMessage<EndSessionRequest> | undefined, b: EndSessionRequest | PlainMessage<EndSessionRequest> | undefined): boolean {
    return proto3.util.equals(EndSessionRequest, a, b);
  }
}

/**
 * @generated from message EndSessionResponse
 */
export class EndSessionResponse extends Message<EndSessionResponse> {
  /**
   * @generated from field: string entry = 1;
   */
  entry = "";

  /**
   * @generated from field: string winnings = 2;
   */
  winnings = "";

  /**
   * @generated from field: int32 req_counter = 3;
   */
  reqCounter = 0;

  /**
   * @generated from field: int32 total_cashout_game = 4;
   */
  totalCashoutGame = 0;

  /**
   * @generated from field: int32 total_cashout = 5;
   */
  totalCashout = 0;

  constructor(data?: PartialMessage<EndSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "EndSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "winnings", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "req_counter", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "total_cashout_game", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "total_cashout", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndSessionResponse {
    return new EndSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndSessionResponse {
    return new EndSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndSessionResponse {
    return new EndSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EndSessionResponse | PlainMessage<EndSessionResponse> | undefined, b: EndSessionResponse | PlainMessage<EndSessionResponse> | undefined): boolean {
    return proto3.util.equals(EndSessionResponse, a, b);
  }
}

